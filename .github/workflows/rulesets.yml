on: [pull_request]

jobs:
  apic-deploy-test:
    runs-on: ubuntu-latest
    name: API Deployment
    steps:

  - name: Get APIC Toolkit
    shell: bash
    run: |
      curl -LO https://${{ inputs.manager-host }}/client-downloads/toolkit-linux.tgz
      tar -zxf toolkit-linux.tgz

  - name: Validate product
    shell: bash
    run: |
      ./apic-slim --accept-license --live-help validate ${{ inputs.product-file }}

  - name: Login to API Manager with provided credentials
    shell: bash
    if: ${{ inputs.validate_only == 'false' }}
    run: |
      if [[ "${{ inputs.iam-apikey }}" != "" ]]; then
        echo "Using IAM API Key"
        mkdir ~/.apiconnect/
        touch ~/.apiconnect/token
        ACCESS_TOKEN=$(curl -s "https://iam.cloud.ibm.com/identity/token" -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/json' --data "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=${{ inputs.iam-apikey}}" | jq .access_token -r)
        echo "${{ inputs.api-host}}/api: |
              refresh_token: \"\"
              access_token: ${ACCESS_TOKEN}" > ~/.apiconnect/token 
      fi
      if [[ "${{ inputs.apikey }}" != "" ]]; then
        echo "Using apikey"
        ./apic-slim login --server ${{ inputs.api-host }} --sso --apiKey ${{ inputs.apikey }} --context provider
      fi
      if [[ "${{ inputs.username }}" != "" ]]; then
        echo "Using username/password"
        ./apic-slim login --server ${{ inputs.api-host }} --username ${{ inputs.username }} --password ${{ inputs.password }} --realm ${{ inputs.realm }}
      fi

  - name: Check API with rulesets
    shell: bash
    run: |
      ./apic-slim --mode governance compliance:validate --server ${{ inputs.api-host }} --org ${{ inputs.provider-org }} echo-api.yaml --format json | tee compliance.json      
      jq -cr '.errors[] | "::warning file=orders_api.yaml ::title\(.severity): \(.ruleset_name) \(.rule_name)::\(.message)"' compliance.json